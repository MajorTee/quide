buildscript {
	repositories {
		mavenCentral()
		maven { url "http://dl.bintray.com/arturbosch/code-analysis" }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

plugins {
	id "com.jfrog.bintray" version "1.7.3"
	id 'com.github.ben-manes.versions' version '0.13.0'
	id "com.github.johnrengelman.shadow" version "1.2.3"
	id "io.gitlab.arturbosch.detekt" version "1.0.0.M10.2"
//		id "com.github.hierynomus.license" version "0.13.1"
}

allprojects {

	group 'io.gitlab.arturbosch'
	version "$quideVersion"

	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "http://dl.bintray.com/arturbosch/generic" }
		maven { url "http://dl.bintray.com/arturbosch/code-analysis" }
	}

	apply plugin: 'java'
	apply plugin: 'maven'

	def projectName = it.name
	if (projectName.startsWith("quide") && projectName != "quide-specification") {
		apply plugin: 'kotlin'

		if (projectName.contains("plugin")) {
			task fatJar(type: Jar) {
				baseName = project.name
				from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
				with jar
			}
		}
	}

	if (projectName == "quide-platform" || projectName == "quide-shell" || projectName == "quide-crawler") {
		apply plugin: 'application'
		apply plugin: 'com.github.johnrengelman.shadow'
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: uri('../repo'))
			}
		}
	}

	if (projectName.startsWith("quide")) {

		apply plugin: 'maven-publish'
		apply plugin: 'com.jfrog.bintray'

		bintray {
			user = System.getenv("BINTRAY_USER") ?: ""
			key = System.getenv("BINTRAY_API_KEY") ?: ""
			publications = ["QuidePublication"]

			pkg {
				repo = 'code-analysis'
				name = 'quide'
				userOrg = 'arturbosch'
				licenses = ['Apache-2.0']
				vcsUrl = "https://github.com/arturbosch/quide"

				version {
					name = project.version
					released = new Date()
				}
			}
		}

		publishing {
			publications {
				QuidePublication(MavenPublication) {
					from components.java
					groupId project.group
					artifactId project.name
					version project.version
				}
			}
		}
	}

	configurations {
		kotlinTest
		spock
		log
	}
	configurations.create('kotlin')

	dependencies {
		log "org.slf4j:slf4j-api:$slfVersion"
		log "org.apache.logging.log4j:log4j-slf4j-impl:$loggerVersion"
		log "org.apache.logging.log4j:log4j-api:$loggerVersion"
		log "org.apache.logging.log4j:log4j-core:$loggerVersion"
		kotlin "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		kotlin "io.gitlab.arturbosch:kutils:$kutilsVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		kotlinTest "org.assertj:assertj-core:$assertjVersion"
		spock "org.spockframework:spock-core:$spockVersion"
		spock "org.codehaus.groovy:groovy-all:$groovyVersion"
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		main.java.srcDirs += 'src/main/groovy'
	}

	compileKotlin {
		kotlinOptions.jvmTarget = "1.8"
	}

}

detekt {
	version = "1.0.0.M10.2"
	config = "$project.projectDir/detekt.yml"
	filters = '.*/test/.*, .*/resources/.*'
}